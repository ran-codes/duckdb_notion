---
title: "Getting Started with DuckDB Notion Extension"
format: html
jupyter: python3
---

# DuckDB Notion Extension - Getting Started

This notebook demonstrates how to use the DuckDB Notion extension to query and analyze Notion databases using SQL.

## Installation

First, let's install the required dependencies:

```{python}
#| eval: false
!pip install duckdb python-dotenv
```

## Setup

Load the extension and set up authentication:

```{python}
#| eval: false
import duckdb
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Connect to DuckDB
con = duckdb.connect()

# Load the Notion extension (once available in community extensions)
# con.execute("INSTALL notion FROM community")
# con.execute("LOAD notion")

print("DuckDB connected successfully!")
print(f"DuckDB version: {duckdb.__version__}")
```

## Authentication

Set up your Notion integration token:

```{python}
#| eval: false
# Option 1: Environment variable (recommended)
# Already loaded from .env file above

# Option 2: DuckDB secret
notion_token = os.getenv('NOTION_TOKEN')
if notion_token:
    con.execute(f"""
        CREATE SECRET notion_secret (
            TYPE notion,
            token '{notion_token}'
        )
    """)
    print("✓ Notion authentication configured")
else:
    print("⚠️ NOTION_TOKEN not found in environment")
```

## Reading from Notion

Query a Notion database:

```{python}
#| eval: false
# Replace with your actual database ID
database_id = "your_database_id_here"

# Read the database
result = con.execute(f"""
    SELECT *
    FROM read_notion('{database_id}')
    LIMIT 10
""").df()

print(f"Retrieved {len(result)} rows")
result.head()
```

## Basic Analytics

Perform some basic analytics on Notion data:

```{python}
#| eval: false
# Count by status
status_counts = con.execute(f"""
    SELECT
        status,
        COUNT(*) as count
    FROM read_notion('{database_id}')
    GROUP BY status
    ORDER BY count DESC
""").df()

print("Status distribution:")
status_counts
```

## Visualization

```{python}
#| eval: false
import matplotlib.pyplot as plt

# Create a bar chart
plt.figure(figsize=(10, 6))
plt.bar(status_counts['status'], status_counts['count'])
plt.xlabel('Status')
plt.ylabel('Count')
plt.title('Task Distribution by Status')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```

## Writing to Notion

Create a sample dataset and write it to Notion:

```{python}
#| eval: false
# Create a sample table
con.execute("""
    CREATE TABLE sample_tasks (
        name VARCHAR,
        priority INTEGER,
        completed BOOLEAN
    )
""")

# Insert data
con.execute("""
    INSERT INTO sample_tasks VALUES
        ('Review code', 1, false),
        ('Write tests', 2, false),
        ('Deploy to prod', 3, false)
""")

# Copy to Notion
# con.execute(f"COPY sample_tasks TO '{database_id}' (FORMAT notion)")
print("✓ Data ready to write to Notion")
```

## Next Steps

- Explore complex queries joining Notion with other data sources
- Set up automated reporting pipelines
- Create dashboards using your favorite visualization tools

For more examples, check out the other notebooks in this directory!
