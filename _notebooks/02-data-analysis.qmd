---
title: "Advanced Data Analysis with Notion and DuckDB"
format: html
jupyter: python3
---

# Advanced Data Analysis

This notebook demonstrates advanced analytical queries on Notion databases.

## Setup

```{python}
#| eval: false
import duckdb
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

con = duckdb.connect()
# con.execute("LOAD notion")
```

## Complex Queries

### Time-based Analysis

```{python}
#| eval: false
# Analyze task creation trends
query = """
SELECT
    DATE_TRUNC('week', CAST(created_time AS TIMESTAMP)) as week,
    COUNT(*) as tasks_created,
    SUM(CASE WHEN completed THEN 1 ELSE 0 END) as tasks_completed
FROM read_notion('database_id')
WHERE created_time >= CURRENT_DATE - INTERVAL 90 DAY
GROUP BY week
ORDER BY week
"""

trends = con.execute(query).df()

# Visualize with Plotly
fig = go.Figure()
fig.add_trace(go.Scatter(x=trends['week'], y=trends['tasks_created'],
                         name='Created', mode='lines+markers'))
fig.add_trace(go.Scatter(x=trends['week'], y=trends['tasks_completed'],
                         name='Completed', mode='lines+markers'))
fig.update_layout(title='Task Creation vs Completion Trends',
                  xaxis_title='Week', yaxis_title='Count')
fig.show()
```

### Priority Analysis

```{python}
#| eval: false
# Analyze task completion by priority
query = """
SELECT
    priority,
    COUNT(*) as total_tasks,
    SUM(CASE WHEN completed THEN 1 ELSE 0 END) as completed_tasks,
    ROUND(100.0 * SUM(CASE WHEN completed THEN 1 ELSE 0 END) / COUNT(*), 2) as completion_rate
FROM read_notion('database_id')
GROUP BY priority
ORDER BY priority
"""

priority_stats = con.execute(query).df()
priority_stats
```

### Team Performance

```{python}
#| eval: false
# Analyze performance by assignee
query = """
SELECT
    assignee,
    COUNT(*) as total_assigned,
    SUM(CASE WHEN completed THEN 1 ELSE 0 END) as completed,
    AVG(CASE WHEN completed THEN
        DATEDIFF('day', created_time::TIMESTAMP, last_edited_time::TIMESTAMP)
        ELSE NULL END) as avg_completion_days
FROM read_notion('database_id')
GROUP BY assignee
ORDER BY completed DESC
"""

team_performance = con.execute(query).df()

# Create visualization
fig = px.bar(team_performance, x='assignee', y='completed',
             title='Tasks Completed by Team Member',
             labels={'assignee': 'Team Member', 'completed': 'Completed Tasks'})
fig.show()
```

## Joining Multiple Notion Databases

```{python}
#| eval: false
# Join projects database with tasks database
query = """
SELECT
    p.project_name,
    p.status as project_status,
    COUNT(t.id) as total_tasks,
    SUM(CASE WHEN t.completed THEN 1 ELSE 0 END) as completed_tasks,
    ROUND(100.0 * SUM(CASE WHEN t.completed THEN 1 ELSE 0 END) / COUNT(t.id), 2) as progress_pct
FROM read_notion('projects_db_id') p
LEFT JOIN read_notion('tasks_db_id') t ON p.id = t.project_id
WHERE p.status = 'Active'
GROUP BY p.project_name, p.status
ORDER BY progress_pct DESC
"""

project_progress = con.execute(query).df()
project_progress
```

## Combining Notion with External Data

```{python}
#| eval: false
# Load external CSV data
external_data = pd.DataFrame({
    'task_id': ['task1', 'task2', 'task3'],
    'estimated_hours': [5, 8, 3],
    'actual_hours': [6, 7, 4]
})

# Register as DuckDB table
con.register('external_data', external_data)

# Join with Notion data
query = """
SELECT
    n.name,
    n.status,
    e.estimated_hours,
    e.actual_hours,
    (e.actual_hours - e.estimated_hours) as variance
FROM read_notion('database_id') n
INNER JOIN external_data e ON n.id = e.task_id
"""

combined_analysis = con.execute(query).df()
combined_analysis
```

## Export Results

```{python}
#| eval: false
# Export analysis results to CSV
trends.to_csv('task_trends.csv', index=False)
priority_stats.to_csv('priority_analysis.csv', index=False)
team_performance.to_csv('team_performance.csv', index=False)

print("âœ“ Analysis results exported to CSV files")
```

## Create Summary Report

```{python}
#| eval: false
# Generate a comprehensive summary
summary = con.execute("""
SELECT
    COUNT(*) as total_tasks,
    SUM(CASE WHEN completed THEN 1 ELSE 0 END) as completed,
    SUM(CASE WHEN NOT completed THEN 1 ELSE 0 END) as pending,
    COUNT(DISTINCT assignee) as team_members,
    ROUND(AVG(CASE WHEN priority IS NOT NULL THEN priority END), 2) as avg_priority
FROM read_notion('database_id')
""").df()

print("=== Summary Report ===")
print(summary.to_string(index=False))
```

## Next Steps

- Set up automated reporting with scheduled Quarto renders
- Create interactive dashboards with Streamlit or Dash
- Build data pipelines that sync Notion with your data warehouse
